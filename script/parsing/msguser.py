import datetime

from peewee import JOIN
from parsing.log import logger
from parsing.base.usertask import Usertask
from parsing.base.task import Task
from parsing.routestep import StepsTasks
from parsing.dates import Dates

import telebot
from telebot import types
import os
import platform
from dotenv import load_dotenv


class MsgUser:
    """
    –ü—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Ä–µ–π—Å–∞ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    def __init__(self):
        self._API_TOKEN = os.getenv('API_TOKEN')
        self._DELETE_TASK_MSG = 'Delete_task'
        self._bot = None

    def send_msg_have_place(self):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞
        """
        logger.info('CELERY –ú–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—è–≤–∏–ª–∏—Å—å?')
        tasks_obj = StepsTasks()
        usertasks = tasks_obj.get_tasks_have_place()
        if usertasks:
            for usertask in usertasks:
                task = tasks_obj.create_info_task(usertask.id_chat, usertask.id, usertask.task.date,
                                                  usertask.task.id_from_city, usertask.task.id_to_city,
                                                  usertask.task.info)
                time_off = Dates.create_date_time_str(datetime.datetime.now())
                time_diff_str = Dates.get_diff_time_str(usertask.task.time_on, time_off)
                create_time_str = Dates.create_time_str(usertask.task.time_on)
                msg_place = f'–ü–û–Ø–í–ò–õ–û–°–¨ –º–µ—Å—Ç–æ –≤ {create_time_str} —á–∞—Å'
                msg_free = f'–°–í–û–ë–û–î–ù–û ({time_diff_str})'
                logger.info(f'CELERY {usertask.id_chat} –ü–æ—è–≤–∏–ª–æ—Å—å –º–µ—Å—Ç–æ {task.info}')
                msg = self._send_button_delete(usertask.id_chat, f'üü¢{msg_place}\nüü¢{msg_free}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄüëÄ‚îÄ‚îÄ‚îÄ‚îÄ\nüü¢{task.info}', usertask.id)
                tasks_obj.update_task_msg_delete(usertask.id, msg.id)
                if usertask.id_msg_delete:
                    self._delete_message(usertask.id_chat, usertask.id_msg_delete,
                                         f'CELERY id_chat {usertask.id_chat} –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ID {usertask.id_msg_delete}')
        else:
            logger.info('CELERY –ù–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏.')

    def _send_button_delete(self, id_chat, text, id_base_task):
        """
        –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        :param id_chat:
        :param text:
        :return:
        """
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–ª–µ–∂–µ–Ω–∏–µ!", callback_data=f'{self._DELETE_TASK_MSG}{id_base_task}')
        markup.add(button1)
        msg = self._send_message(id_chat, text, markup)
        return msg

    def _command_delete_msg(self, id_chat, id_base_user_task, msg):
        """
        –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å, –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ –æ–Ω–æ —É–¥–∞–ª–µ–Ω–æ
        """
        self._delete_task(id_chat, id_base_user_task, msg)
        id_msg_delete = StepsTasks.get_msg_delete(id_base_user_task)
        if id_msg_delete:
            self._delete_message(id_chat, id_msg_delete,
                                 f'{id_chat} –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ID {id_msg_delete}')

    def answer_user(self, id_chat, text: str):
        """
        –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–ª–µ–∂–µ–Ω–∏–µ.
        –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏ —Å–ª–µ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        :param id_chat:
        :param text:
        """
        logger.info(f'{id_chat} –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ" "{text}"')
        if not text.startswith(self._DELETE_TASK_MSG):
            logger.error(f'{id_chat} –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—å—Å—è —Å "{self._DELETE_TASK_MSG}"')
            return
        id_base_user_task = text.replace(self._DELETE_TASK_MSG, '')
        self._command_delete_msg(id_chat, id_base_user_task, "‚ùå–°–ª–µ–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ‚ùå\n")

    def _delete_task(self, id_chat, id_base_user_task, msg_text):
        """
        –í—ã—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –ø–æ ID usertask –∏ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ —Å –±–∞–∑—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        usertasks = StepsTasks.get_tasks_have_place_id(id_base_user_task)
        if not usertasks:
            logger.error(f'{id_chat} –ù–µ—Ç –≤ –±–∞–∑–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è ID_usertask{id_base_user_task}')
            return
        user_task = usertasks[0]
        task = StepsTasks().create_info_task(user_task.id_chat, user_task.id, user_task.task.date,
                                             user_task.task.id_from_city, user_task.task.id_to_city,
                                             user_task.task.info)
        msg = self._send_message(user_task.id_chat, f'{msg_text}üü°{task.info}', None)
        StepsTasks.delete_usertask(id_base_user_task)

    def _delete_message(self, id_chat, id_msg_delete, msg):
        """
        –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
        :param id_chat:
        :param id_msg_delete:
        """
        try:
            if not self._bot:
                self._create_link_bot()
            self._bot.delete_message(id_chat, id_msg_delete)
            logger.info(msg)
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è chat {id_chat} msg {id_msg_delete}', exc_info=True)

    def _send_message(self, id_chat, text, markup):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        try:
            if not self._bot:
                self._create_link_bot()
            if markup:
                msg = self._bot.send_message(id_chat, text, reply_markup=markup)
            else:
                msg = self._bot.send_message(id_chat, text)
            logger.info(f'CELERY {id_chat} –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ID {msg.id}')
            return msg
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è chat {id_chat} msg {text}', exc_info=True)

    def _create_link_bot(self):
        """
        –°–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å —Å –±–æ—Ç–æ–º
        :return:
        """
        self._bot = telebot.TeleBot(self._API_TOKEN)

    def send_msg_place_off(self):
        """
        –ï—Å–ª–∏ –Ω–µ —É—Å–ø–µ–ª —É–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∞ –º–µ—Å—Ç–æ –ø—Ä–æ–ø–∞–ª–æ, –æ—Ç–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–ø—É—Å–∫–µ
        """
        logger.info('CELERY –ï—Å–ª–∏ –Ω–µ —É—Å–ø–µ–ª —É–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∞ –º–µ—Å—Ç–æ –ø—Ä–æ–ø–∞–ª–æ, –æ—Ç–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–ø—É—Å–∫–µ')
        tasks_obj = StepsTasks()
        usertasks = self._get_tasks_place_off()
        if usertasks:
            for usertask in usertasks:
                task = tasks_obj.create_info_task(usertask.id_chat, usertask.id, usertask.task.date,
                                                  usertask.task.id_from_city, usertask.task.id_to_city,
                                                  usertask.task.info)
                time_diff_str = Dates.get_diff_time_str(usertask.task.time_on, usertask.task.time_off)
                create_time_str = Dates.create_time_str(usertask.task.time_on)
                logger.info(f'CELERY {usertask.id_chat} –ú–µ—Å—Ç–æ —Å–Ω–æ–≤–∞ –∑–∞–Ω—è—Ç–æ {task.info}')
                msg_place = f'–ú–µ—Å—Ç–æ –æ—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –≤ {create_time_str} —á–∞—Å'
                msg_free = f'{time_diff_str} –±—ã–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ'
                msg = self._send_message(usertask.id_chat, f'üòï{msg_place}\nüò¢{msg_free}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄüëÄ‚îÄ‚îÄ‚îÄ‚îÄ\n'
                                                           f'üü°{task.info}', None)

                tasks_obj.update_task_msg_delete(usertask.id, "")
                if usertask.id_msg_delete:
                    self._delete_message(usertask.id_chat, usertask.id_msg_delete,
                                         f'CELERY id_chat {usertask.id_chat} –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ID {usertask.id_msg_delete}')
        else:
            logger.info('CELERY –ù–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–æ —Å–Ω–æ–≤–∞ –∑–∞–Ω—è—Ç—ã–º–∏ –º–µ—Å—Ç–∞–º–∏.')

    def _get_tasks_place_off(self):
        """
        –í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π —Å —Ä–µ–π—Å–∞–º–∏, –º–µ—Å—Ç–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Å–Ω–æ–≤–∞ –∑–∞–Ω—è—Ç—ã
        :return:
        """
        try:
            logger.debug(f'–í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π c —Ä–µ–π—Å–∞–º–∏, –º–µ—Å—Ç–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Å–Ω–æ–≤–∞ –∑–∞–Ω—è—Ç—ã')
            return Usertask.select()\
                           .join(Task) \
                            .where(Task.have_place == False,
                                   Task.time_on != "",
                                   Task.time_off != "",
                                   Usertask.id_msg_delete != "") \
                            .order_by(Task.date).execute()
        except Exception as e:
            raise Exception(f'–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ c –±–∞–∑—ã. {str(e)}')

    def _get_tasks_delete(self):
        """
        –í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã –∏ –∏—Ö –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å
        :return:
        """
        try:
            logger.debug(f'–í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã –∏ –∏—Ö –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å')
            date_now_str = Dates.create_date_str(datetime.datetime.now())
            date_time_str = Dates.create_date_time_str(datetime.datetime.now())
            time_now_str = Dates.create_time_str(date_time_str)
            print(time_now_str+':00')
            return Task.select(Usertask.id, Usertask.id_chat, Task.id.alias('id_task')) \
                       .join(Usertask, JOIN.LEFT_OUTER) \
                       .where(Task.date == date_now_str,
                              Task.time_from < time_now_str+':00')\
                       .order_by(Task.id) \
                       .dicts()
        except Exception as e:
            raise Exception(f'–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ c –±–∞–∑—ã. {str(e)}')

    def delete_old_tasks(self):
        """
        –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–ª–µ–∂–µ–Ω–∏—è, –∏ —Å–æ–æ–±—â–∏—Ç—å —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        usertasks = self._get_tasks_delete()
        task_delete_prev = 0
        for usertask in usertasks:
            if usertask.get('id_chat') and usertask.get('id'):
                logger.info(f'CELERY {usertask.get("id_chat")} –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ, —É–¥–∞–ª–∏—Ç—å —Å–ª–µ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                self._command_delete_msg(usertask.get('id_chat'), usertask.get('id'),
                                         "‚ùå–°–ª–µ–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ‚ùå\nüöô–ú–∞—Ä—à—Ä—É—Ç–∫–∞ –≤—ã–µ—Ö–∞–ª–∞\n")
            if task_delete_prev != usertask.get('id_task'):
                StepsTasks.delete_task(usertask.get('id_task'))
                logger.info(f'CELERY –£–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ task ID {usertask.get("id_task")}')
                task_delete_prev = usertask.get('id_task')


if __name__ == '__main__':
    BASE_PATH = '../secrets.env'
    if platform.system().startswith('L'):
        BASE_PATH = 'secrets.env'  # –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å Linux python3 start.py
    load_dotenv(BASE_PATH)
    MsgUser().delete_old_tasks()


    #from parsing.taskstep import RunTask
    #RunTask._update_task_have_place("08.03.2023", 5, 23, "(12:15-14:35)", True)
    #MsgUser().send_msg_have_place()  # –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø–æ—è–≤–∏–ª–∏—Å—å –º–µ—Å—Ç–∞
    #MsgUser().send_msg_place_off()  # –ï—Å–ª–∏ –Ω–µ —É—Å–ø–µ–ª —É–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∞ –º–µ—Å—Ç–æ –ø—Ä–æ–ø–∞–ª–æ, –æ—Ç–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–ø—É—Å–∫–µ
