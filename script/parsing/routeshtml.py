from parsing.log import logger
import requests
from bs4 import BeautifulSoup
import json
import enum
from parsing.exception import ExceptionMsg
from typing import List
from parsing.base.task import Task
from parsing.base.usertask import Usertask


class PlaceMode(enum.Enum):
    FROM = 1
    TO = 2


class Place:
    """
    –ò–∑ container_html –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –∏ –≥–æ—Ä–æ–¥ –≤—ã–µ–∑–¥–∞ –∏ –ø—Ä–∏–µ–∑–¥–∞ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É
    """
    def __init__(self, container_html, mode: PlaceMode):
        """
        –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è –≤—Ä–µ–º—è –∏ –≥–æ—Ä–æ–¥
        :param container_html: –°—Ç—Ä–∞–Ω–∏—É–∞ —Å –∏–Ω—Ñ–æ –º–∞—Ä—à—Ä—É—Ç–∞
        :param mode: –†–µ–∂–∏–º FROM –∏–ª–∏ TO
        """
        logger.debug('–û–±—ä–µ–∫—Ç –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ')
        route_html = self._get_route_html(container_html, mode)
        self._time: str = self._get_time_city(route_html, 'time')
        self._city: str = self._get_time_city(route_html, 'place')
        self._date: str = self._get_time_city(route_html, 'date')

    @property
    def time(self):
        return self._time

    @property
    def city(self):
        return self._city

    @property
    def date(self):
        return self._date

    def _get_time_city(self, route_html, str_time_place: str):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –∏–ª–∏ –º–µ—Å—Ç–æ –∏–∑ HTML
        :param route_html: –ß–∞—Å—Ç—å —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏ –º–µ—Å—Ç–æ–º
        :param route_html: –ß–∞—Å—Ç—å —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏ –º–µ—Å—Ç–æ–º
        :return: –ú–µ—Å—Ç–æ –∏–ª–∏ –≤—Ä–µ–º—è
        """
        logger.debug('–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –∏–ª–∏ –º–µ—Å—Ç–æ –∏–∑ HTML')
        part_html = route_html.find('div', class_=f'nf-route__{str_time_place}')
        if part_html is None:
            raise Exception(f'–û—à–∏–±–∫–∞. –ù–µ –∏–∑–≤–ª–µ—á—å nf-route__{str_time_place}')
        return part_html.string

    def _get_route_html(self, container_html, mode: PlaceMode):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∞—Å—Ç—å HTML —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏ –º–µ—Å—Ç–æ–º
        :param container_html: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–µ–∑–¥–∫–µ
        :param mode: –†–µ–∂–∏–º –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        :return: HTML –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ
        """
        logger.debug('–ò–∑–≤–ª–µ—á—å route_html')
        out = None
        if mode == PlaceMode.FROM:
            out = container_html.find('div', class_='nf-route__from')
        elif mode == PlaceMode.TO:
            out = container_html.find('div', class_='nf-route__to')
        if out is None:
            raise Exception(f'–û—à–∏–±–∫–∞. –ù–µ –∏–∑–≤–ª–µ—á—å route__from/to! {container_html.string}')
        return out


class Route:
    def __init__(self):
        self.place_from: Place
        self.place_to: Place
        self.duration: str
        self._full_car: str = ""
        self.id: str = ""
        self.have_task: bool = False

    @property
    def full_car(self):
        return self._full_car

    @full_car.setter
    def full_car(self, full):
        if full == "–Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç":
            self._full_car = ""
        else:
            self._full_car = full

    @property
    def info(self):
        close = 'üü¢'
        if self.have_task:
            close = "üü°"
        elif self._full_car:
            close = "üî¥"
        return f'{self.id if int(self.id) > 9 else " " + self.id} : {close} ' \
               f'{self.place_from.time}-{self.place_to.time} ({self.duration})'

    @property
    def info_short(self):
        return f'({self.place_from.time}-{self.place_to.time})'

    @property
    def time_from(self):
        return f'{self.place_from.time}'

    @property
    def title(self):
        if self.place_from:
            return f'{self.place_from.date}\n{self.place_from.city} -> {self.place_to.city}'

    @property
    def have_place(self):
        if not self._full_car:
            return True


class DateRoute:
    def __init__(self, date, week):
        self.date: str = date
        self.week: str = week

    @property
    def info(self):
        return f'{self.date} - {self.week}'


class DownloadRoutes:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ä–µ–π—Å–æ–≤
    """
    def __init__(self, day, id_from, id_to, id_chat: int = 0):
        self._route_one: Route
        self._routes_list: List[Route] = list()
        self._dates_route: list = list()
        self._download_routes(day, id_from, id_to)
        self._day = day
        self._id_from = id_from
        self._id_to = id_to
        self._id_chat = id_chat

    @property
    def list(self):
        if self._id_chat:
            self._set_point_yellow(self._id_chat, self._day, self._id_from, self._id_to)
        return self._routes_list

    @property
    def dates_route(self):
        return self._dates_route

    def have_place(self, info):
        for r in self._routes_list:
            if r.info_short == info:
                return r.have_place

    def get_route(self, id):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–π—Å –ø–æ id
        :param id:
        :return:
        """
        for route in self._routes_list:
            if route.id == id:
                return route
        raise ExceptionMsg('–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞')

    def _download_routes(self, day, id_from, id_to):
        """
        –ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞
        """
        try:
            logger.debug('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞')
            page_html = self._get_page_html(day, id_from, id_to)
            self._parse_route(page_html)
        except ExceptionMsg as e:
            raise ExceptionMsg(str(e))
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞! –ü—Ä–∏ –ø–µ—Ä–µ–±–æ—Ä–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ {str(e)}")

    def _parse_route(self, page_html):
        """
        –ó–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Ä–µ–º—è –≥–æ—Ä–æ–¥ –≤—Ä–µ–º—è_–ø—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        :param page_html: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        """
        list_routes_html = self._get_nf_route_html(page_html)
        count = len(list_routes_html)
        for nf_route_one_html, id in zip(list_routes_html, range(1, count + 1)):
            self._route_one = Route()
            self._parse_nf_route_one_html(nf_route_one_html)
            self._route_one.id = str(id)
            self._routes_list.append(self._route_one)

    def _parse_nf_route_one_html(self, nf_route_one_html):
        """
        –ò–∑–≤–ª–µ—á—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ
        :param nf_route_one_html: HTML —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–¥–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
        """
        try:
            container_html = self._get_container_html(nf_route_one_html)
            self._full_places_from_to(container_html)
            self._full_duration_full_car(container_html)
        except Exception as e:
            raise Exception(f'–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä—à—Ä—É—Ç–µ {str(e)}')

    def _get_page_html(self, day, id_from, id_to):
        """
        –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
        –í—Å–µ —á–∞—Å—Ç–∏ HTML —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
        :return: HTML list
        """
        logger.debug('–ß–∞—Å—Ç–∏ HTML —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤')
        response = requests.get(f'https://xn--90aiim0b.xn--80aa3agllaqi6bg.xn--90ais/schedules?'
                                f'station_from_id=0&station_to_id=0&'
                                f'city_from_id={id_from}&'
                                f'city_to_id={id_to}&'
                                f'date={day}&time=00%3A00&places=1')
        if response.status_code != 200:
            logger.warning(f'–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω {response.status_code} {response.text}')
            raise Exception('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä ', response.status_code)
        logger.debug(f'–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω {response.status_code}')
        logger.debug(f'–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω {response.text}')
        data = json.loads(response.text)
        out = BeautifulSoup(data.get("html"), 'html.parser')
        if out is None:
            raise Exception('–û—à–∏–±–∫–∞, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å html')
        alert = out.find('div', class_='alert__content')
        if alert:
            alert_str = alert.string
            if alert_str.startswith('–†–µ–π—Å—ã'):
                raise ExceptionMsg(alert_str)
        return out

    def _get_nf_route_html(self, page_html):
        """
        –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
        –í—Å–µ —á–∞—Å—Ç–∏ HTML —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
        :return: HTML list
        """
        logger.debug('–ß–∞—Å—Ç–∏ HTML —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤')
        out = page_html.find_all('div', class_='nf-route')
        if out == []:
            raise Exception('–û—à–∏–±–∫–∞, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å nf-route')
        return out

    def _get_container_html(self, nf_route_one_html):
        """
        –ò–∑–≤–ª–µ—á—å container c –∏–Ω—Ñ–æ –æ –º–∞—Ä—à—Ä—É—Ç–µ
        :param nf_route_one_html: HTML —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–¥–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
        :return: HTML container
        """
        logger.debug('–ò–∑–≤–ª–µ—á—å –∫–æ–Ω—Ç–∞–π–Ω–µ—Ä')
        container_html = nf_route_one_html.find('div', class_='nf-route__container')
        if container_html is None:
            raise Exception('–û—à–∏–±–∫–∞, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å nf-route__container', nf_route_one_html.string)
        return container_html

    def _full_places_from_to(self,container_html):
        """
        –ò–∑–≤–ª–µ—á—å –≤—Ä–µ–º—è –∏ –≥–æ—Ä–æ–¥ –æ—Ç—ä–µ–∑–¥–∞ –∏ –ø—Ä–∏–µ–∑–¥–∞
        :param container_html: HTML —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–¥–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤
        """
        logger.debug('–ò–∑–≤–ª–µ—á—å –≤—Ä–µ–º—è –∏ –≥–æ—Ä–æ–¥ –≤—ã–µ–∑–¥–∞')
        self._route_one.place_from = Place(container_html, PlaceMode.FROM)
        logger.debug('–ò–∑–≤–ª–µ—á—å –≤—Ä–µ–º—è –∏ –≥–æ—Ä–æ–¥ –ø—Ä–∏–µ–∑–¥–∞')
        self._route_one.place_to = Place(container_html, PlaceMode.TO)

    def _full_duration_full_car(self, container_html):
        """
        –ò–∑–≤–ª–µ—á—å –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏ –∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞
        :param nf_route_one_html: HTML —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–¥–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤
        """
        logger.debug('–ò–∑–≤–ª–µ—á—å –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏ –∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞')
        info = container_html.find('div', class_='nf-route__content')
        if info is None:
            raise Exception('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å route__content')
        logger.debug('–ò–∑–≤–ª–µ—á—å –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏')
        duration = info.find('div', class_='nf-route__duration')
        if duration is None:
            raise Exception('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å route__content')
        self._route_one.duration = duration.string
        logger.debug('–ò–∑–≤–ª–µ—á—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –º–∞—à–∏–Ω—ã')
        full_car = info.find('div', class_='nf-route__time')
        if full_car:
            self._route_one.full_car = full_car.string

    def _set_point_yellow(self, id_chat, day, id_from, id_to):
        """
        –ü–æ–º–µ—Ç–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç
        """
        usertasks = Usertask.select().join(Task).where(Usertask.id_chat == id_chat,
                                                       Task.date == day,
                                                       Task.id_from_city == id_from,
                                                       Task.id_to_city == id_to).execute()
        for usertask in usertasks:
            self._set_have_task(usertask.task.info)

    def _set_have_task(self, info_short):
        """
        –ü–æ–º–µ—Ç–∏—Ç—å —ç—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç
        """
        for route in self._routes_list:
            if route.info_short == info_short:
                route.have_task = True

    def check_task_route(self, info_short):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª, —Ç–∞–∫–æ–µ –∂–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–∂–µ–Ω–∏—è
        :return:
        """

        logger.debug(f'–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        for route in self._routes_list:
            if route.info_short == info_short and route.have_task:
                raise ExceptionMsg('–û—à–∏–±–∫–∞: –≠—Ç–æ —Ä–µ–π—Å –≤—ã —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ!\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞.')


if __name__ == '__main__':
    pass