from parsing.log import logger
import datetime

from parsing.base.task import Task
from parsing.base.settings import Settings
from parsing.base.usertask import Usertask

from parsing.citieshtml import DownloadCities
from typing import List, Dict
from parsing.dates import Dates
from parsing.routeshtml import DownloadRoutes
from parsing.exception import ExceptionMsg
from parsing.interface import Interface


class TaskItem:
    def __init__(self):
        self.id_base: int
        self.id_chat: str
        self.info: str

    @property
    def info_list(self):
        return f'{self.id_chat}: {self.info}'


class StepsTasks:
    def __init__(self):
        self._dict_task_active: Dict[str, TaskItem] = dict()

    def s1_view_active_task(self, interface: Interface):
        """
        –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–π—Å–∞
        """
        logger.info(f'{interface.id_chat} –®–∞–≥ 1 s1_view_active "{interface.msg_user}"')
        self._set_msg_list_tasks_from_base(interface)

    def _set_msg_list_tasks_from_base(self, interface: Interface):
        """
        –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            usertasks = Usertask.select(Usertask, Task).join(Task) \
                .where(Usertask.id_chat == interface.id_chat) \
                .order_by(Task.date, Task.info) \
                .execute()
            count = len(usertasks)
            for usertask, id_chat in zip(usertasks, range(1, count + 1)):
                user_task = self.create_info_task(id_chat, usertask.id, usertask.task.date,
                                             usertask.task.id_from_city, usertask.task.id_to_city,
                                             usertask.task.info)
                self._dict_task_active[str(id_chat)] = user_task
            self.create_msg_list_task(interface)
        except Exception as e:
            raise Exception(f'–û—à–∏–±–∫–∞: –í—ã–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π! {str(e)}')

    def s2_delete_task(self, interface: Interface):
        """
        –ü–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —É–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ
        :return:
        """
        logger.info(f'{interface.id_chat} –®–∞–≥ 2 s2_delete_task "{interface.msg_user}"')
        task_delete = self._dict_task_active.get(interface.msg_user)
        if not task_delete:
            raise ExceptionMsg('–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞!')
        StepsTasks.delete_task(task_delete.id_base)
        self._dict_task_active.pop(interface.msg_user)
        interface.msg_info.text = f'–°–ª–µ–∂–µ–Ω–∏–µ ‚Ññ{task_delete.id_chat} —É–¥–∞–ª–µ–Ω–æ!'
        self.create_msg_list_task(interface)

    def create_msg_list_task(self, interface: Interface):
        """
        –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞–Ω–∏–π
        """
        datetime_last_check = TimeTask.get_str()
        if len(self._dict_task_active) == 0:
            interface.b_end = True
            interface.list_task = '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!'
            return
        s_out = "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n".join([task.info_list for task in self._dict_task_active.values()])
        interface.list_task = f'–í–∞—à–∏ —Å–ª–µ–∂–µ–Ω–∏—è —Ä–µ–π—Å–æ–≤:\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄüëÄ‚îÄ‚îÄ\n{s_out}' \
                              f'\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄüöó‚îÄ‚îÄüöô‚îÄ\n' \
                              f'‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞\n—Ä–µ–π—Å–æ–≤ –±—ã–ª–∞ –≤ {datetime_last_check}' \
                              f'\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄüëÄ‚îÄ‚îÄ\n' \
                              f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ª–µ–∂–µ–Ω–∏—è\n–¥–ª—è –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:'

    def get_id_base(self, id):
        return self._dict_task_active.get(id)

    def create_info_task(self, id_chat, id_base, date, id_city_from, id_city_to, info):
        """
        –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏—è—Ö
        :return:
        """
        task = TaskItem()
        dw_ct = DownloadCities()
        city_from = dw_ct.cities(id_city_from)
        city_to = dw_ct.cities(id_city_to)
        task.info = f'{Dates().get_short_info(date)} {info}\n     {city_from} - {city_to}'
        task.id_base = id_base
        task.id_chat = id_chat
        return task

    @classmethod
    def get_tasks_have_place(cls):
        """
        –í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π —Å —Ä–µ–π—Å–∞–º–∏ —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏
        :return:
        """
        try:
            logger.debug(f'–í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π c —Ä–µ–π—Å–∞–º–∏ —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏')
            return Usertask.select()\
                            .join(Task) \
                            .where(Task.have_place==True) \
                            .order_by(Task.date).execute()
        except Exception as e:
            raise Exception(f'–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ c –±–∞–∑—ã. {str(e)}')

    @classmethod
    def get_msg_delete(cls, id_look):
        """
        ID —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å
        :return:
        """
        try:
            logger.debug(f'–í—ã–≥—Ä—É–∑–∫–∞ ID —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å')
            usertasks = Usertask.select(Usertask.id_msg_delete).join(Task) \
                .where(Usertask.id == id_look).execute()
            for usertask in usertasks:
                return usertask.id_msg_delete
        except Exception as e:
            raise Exception(f'–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ c –±–∞–∑—ã Usertask. {str(e)}')

    @classmethod
    def update_task_msg_delete(cls, id_base, id_delete, task_off):
        """
        –û–±–Ω–æ–≤–∏—Ç—å ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        try:
            Usertask.update({Usertask.id_msg_delete: id_delete, Usertask.task_off: task_off}) \
                .where(Usertask.id == id_base).execute()
        except Exception as e:
            raise Exception(f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å id_base {id_base}, id_msg {id_delete} –≤ Usertask {str(e)}')

    @classmethod
    def delete_task(cls, id_base):
        """
        –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ —Å ID
        """
        try:
            Usertask.delete().where(Usertask.id == id_base).execute()
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–∏—Ç—å id_base {id_base} –≤ Usertask {str(e)}')
            raise ExceptionMsg(f'–û—à–∏–±–∫–∞: –°–ª–µ–∂–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–µ–Ω–æ.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ —á–∏—Å–ª–∞.')

    @classmethod
    def _get_id_task_mirror(cls, date, id_city_from, id_city_to, info, time_from):
        """
        –í–µ—Ä–Ω—É—Ç—å id –ø–æ—Ö–æ–∂–µ–≥–æ —Å–ª–µ–∂–µ–Ω–∏—è
        :return:
        """
        tasks = None
        try:
            logger.debug(f'–í—ã–≥—Ä—É–∑–∫–∞ ID –ø–æ—Ö–æ–∂–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è')
            tasks = Task.select() \
                .where(Task.date == date,
                       Task.id_from_city == id_city_from,
                       Task.id_to_city == id_city_to,
                       Task.info == info,
                       Task.time_from == time_from).execute()
        except Exception as e:
            raise Exception(f'–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ Task c –±–∞–∑—ã. {str(e)}')
        for task in tasks:
            return task

    @classmethod
    def _get_id_task(cls, date, id_city_from, id_city_to, info, time_from):
        """
        –í–µ—Ä–Ω—É—Ç—å id –ø–æ—Ö–æ–∂–µ–≥–æ —Å–ª–µ–∂–µ–Ω–∏—è, –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ
        :return:
        """
        try:
            logger.debug(f'–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ')
            task = cls._get_id_task_mirror(date, id_city_from, id_city_to, info, time_from)
            if task:
                return task
            task = Task.create(date=date,
                               id_from_city=id_city_from,
                               id_to_city=id_city_to,
                               info=info,
                               time_from=time_from).save()
            task = cls._get_id_task_mirror(date, id_city_from, id_city_to, info, time_from)
            if task:
                return task
            else:
                raise Exception("–û—à–∏–±–∫–∞: –ó–∞–ø–∏—Å—å —Å –∑–∞–¥–∞–Ω–∏–µ–º –≤ –±–∞–∑—É –Ω–µ –¥–æ–±–∞–≤–∏–ª–∞—Å—å!")
        except Exception as e:
            raise Exception(f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏. {str(e)}')

    @classmethod
    def add_task_user(cls, id_chat, date, id_city_from, id_city_to, info, time_from):
        """
        –î–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        :return:
        """
        try:
            logger.debug(f'–î–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
            task = cls._get_id_task(date, id_city_from, id_city_to, info, time_from)
            Usertask.create(id_chat=id_chat, task=task).save()
        except Exception as e:
            raise Exception(f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ Usertask. {str(e)}')


class RunTask:
    @classmethod
    def check(cls):
        """
        –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–π—Å–æ–≤ –≤ –±–∞–∑–µ.(–∑–∞–¥–∞–Ω–∏–π)
        –í—ã–≥—Ä—É–∂–∞–µ—Ç –≤ –¥–Ω–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞.
        –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –¥–Ω–∏ –ø–æ –Ω–∞–ª–∏—á–∏—é –≤—Ä–µ–º–µ–Ω–∏
        :return:
        """
        logger.info('CELERY –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞')
        for date in cls._get_dates():
            id_from, id_to = 0, 0
            tasks = cls._get_tasks(date)
            if tasks:
                routes = None
                for task in tasks:
                    if id_from and id_to:
                        if id_from != task.id_from_city or id_to != task.id_to_city:
                            routes = cls._get_routes_server(task.date, task.id_from_city, task.id_to_city)
                            id_from = task.id_from_city
                            id_to = task.id_to_city
                    else:
                        routes = cls._get_routes_server(task.date, task.id_from_city, task.id_to_city)
                        id_from = task.id_from_city
                        id_to = task.id_to_city
                    if routes:
                        for route in routes:
                            if task.info == route.info_short and not task.have_place and route.have_place:
                                logger.info(f"CELERY –û–°–í–û–ë–û–î–ò–õ–û–°–¨ –º–µ—Å—Ç–æ {task.date} {task.info} "
                                             f"from {task.id_from_city} to {task.id_to_city}")
                                cls._update_task_have_place(date, task.id_from_city, task.id_to_city, task.info, True)
                            elif task.info == route.info_short and task.have_place and not route.have_place:
                                logger.info(f"CELERY –°–ù–û–í–û –ó–ê–ù–Ø–¢–û –º–µ—Å—Ç–æ {task.date} {task.info} "
                                             f"from {task.id_from_city} to {task.id_to_city}")
                                cls._update_task_have_place(date, task.id_from_city, task.id_to_city, task.info, False)
        TimeTask.set(datetime.datetime.now())

    @classmethod
    def _get_dates(cls):
        """
        –î–∞—Ç—ã –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Å—ã
        :return:
        """
        dates = Dates()
        dates.have_list()
        return dates.items

    @classmethod
    def _get_tasks(cls, date):
        """
        –í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π —Å —Ä–µ–π—Å–∞–º–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞ 7 –¥–Ω–µ–π
        :return:
        """
        try:
            logger.debug(f'–í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π c –±–∞–∑—ã –Ω–∞ {date}')
            return Task.select(Task.date, Task.id_from_city, Task.id_to_city, Task.info, Task.have_place).distinct() \
                .where(Task.date == date).order_by(Task.date, Task.id_from_city).execute()
        except Exception as e:
            raise Exception(f'–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ c –±–∞–∑—ã. {str(e)}')

    @classmethod
    def _get_routes_server(cls, date, city_from, city_to):
        """
        –í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π —Å —Ä–µ–π—Å–∞–º–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
        :return:
        """
        try:
            logger.info(f'CELERY –í—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Å–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {date}, {city_from}, {city_to}')
            down_routes = DownloadRoutes(date, city_from, city_to)
            routes = down_routes.list
            if routes:
                return routes
            logger.debug(f'–û—à–∏–±–∫–∞ –Ω–µ—Ç —Ä–µ–π—Å–æ–≤ –Ω–∞ {date}, {city_from}, {city_to}')
        except ExceptionMsg as e:
            logger.warning(str(e))
        except Exception as e:
            raise Exception(f'–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞. {str(e)}')

    @classmethod
    def _update_task_have_place(cls, date, city_from, city_to, info, have_place):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Å–æ–≤ –≤ –±–∞–∑–µ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –º–µ—Å—Ç–∞
        """
        try:
            date_time_str = Dates.create_date_time_str(datetime.datetime.now())
            if have_place:
                update_data = {Task.have_place: True, Task.time_on: date_time_str, Task.time_off: "", }
            else:
                update_data = {Task.have_place: False, Task.time_off: date_time_str, }
            Task.update(update_data) \
                .where(Task.date == date, Task.id_from_city == city_from,
                       Task.id_to_city == city_to, Task.info == info) \
                .execute()
        except Exception as e:
            raise Exception(f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Ä–µ–π—Å {date}, {city_from}, {city_to}. {str(e)}')


class TimeTask:
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    NAME_DATETIME_TASK_CHECK = "DATETIME_TASK_CHECK"  # –∏–º—è –ø–æ–ª—è –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–π—Å–æ–≤
    NAME_USER = "USER"  # –∏–º—è
    MSK_DATETIME_VIEW = "%d.%m.%Y %H:%M:%S"

    @classmethod
    def set(cls, datetime_check):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–π—Å–æ–≤
        :param datetime_check: –í—Ä–µ–º—è –∫–ª–∞—Å—Å–∞ datetime
        """
        try:
            datetime_str = datetime_check.strftime(cls.MSK_DATETIME_VIEW)
            Settings.update({Settings.value: datetime_str}) \
                .where(Settings.name == cls.NAME_DATETIME_TASK_CHECK) \
                .execute()
        except Exception as e:
            raise Exception(f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è {cls.NAME_DATETIME_TASK_CHECK}: {datetime_check} {str(e)}')

    @classmethod
    def get_str(cls):
        """
        –í–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–π—Å–æ–≤
        :return: –î–∞—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        """
        try:
            setting = Settings.select(Settings.value) \
                .where(Settings.name == cls.NAME_DATETIME_TASK_CHECK) \
                .execute()
            for s in setting:
                return s.value[-8:]
        except Exception as e:
            raise Exception(f'–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –ø–æ–ª—è {cls.NAME_DATETIME_TASK_CHECK} {str(e)}')

    @classmethod
    def add_name(cls, name):
        """
        –í–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–π—Å–æ–≤
        :return: –î–∞—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        """
        try:
            Settings.create(name=datetime.datetime.now().strftime('%d/%m/%y %H:%M:%S.%f'), value=name).save()
        except Exception as e:
            raise Exception(f'–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –≤ –±–∞–∑—É {cls.NAME_USER} {name} {str(e)}')


if __name__ == '__main__':
    #RunTask.check()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞
    RunTask._update_task_have_place("08.03.2023", 5, 23, "(12:15-14:35)", True)
