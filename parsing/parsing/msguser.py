from parsing.main import StepsTasks

import telebot
from telebot import types
import os


class MsgUser:
    """
    –ü—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Ä–µ–π—Å–∞ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    def __init__(self):
        self._API_TOKEN = os.getenv('API_TOKEN')
        self._DELETE_TASK_MSG = 'Delete_task'
        self._bot = None

    def send_msg_have_place(self):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞
        """
        print('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—è–≤–∏–ª–æ—Å—å –º–µ—Å—Ç–æ –≤–æ –≤—Å–µ—Ö —Ä–µ–π—Å–∞—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö')
        tasks_obj = StepsTasks()
        tasks = tasks_obj.get_tasks_have_place()
        if tasks:
            for task_item in tasks:
                task = tasks_obj.create_info_task(task_item.id_chat, task_item.id, task_item.date,
                                                  task_item.id_from_city, task_item.id_to_city,
                                                  task_item.info)
                print(f'–ü–æ—è–≤–∏–ª–æ—Å—å –º–µ—Å—Ç–æ –¥–ª—è {task_item.id_chat} {task.info}')
                if task_item.id_msg_delete:
                    self._delete_message(task_item.id_chat, task_item.id_msg_delete)
                msg = self._send_button_delete(task_item.id_chat,
                                              '‚ÄºÔ∏è–ü–æ—è–≤–∏–ª–æ—Å—å –º–µ—Å—Ç–æ:‚ÄºÔ∏è\n' + 'üü¢' + task.info, task_item.id)
                tasks_obj.update_task_msg_delete(task_item.id, msg.id)
        else:
            print('–ù–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏.')

    def _send_button_delete(self, id_chat, text, id_base_task):
        """
        –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        :param id_chat:
        :param text:
        :return:
        """
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–ª–µ–∂–µ–Ω–∏–µ!", callback_data=f'{self._DELETE_TASK_MSG}{id_base_task}')
        markup.add(button1)
        msg = self._send_message(id_chat, text, markup)
        return msg

    def answer_user(self, id_chat, text: str):
        if not text.startswith(self._DELETE_TASK_MSG):
            return
        id_base_task = text.replace(self._DELETE_TASK_MSG, '')
        id_msg_delete = StepsTasks.get_msg_delete(id_chat, id_base_task)
        if id_msg_delete:
            self._delete_message(id_chat, id_msg_delete)
        StepsTasks.delete_task(id_base_task)

    def _delete_message(self, id_chat, id_msg_delete):
        """
        –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
        :param id_chat:
        :param id_msg_delete:
        """
        try:
            if not self._bot:
                self._create_link_bot()
            self._bot.delete_message(id_chat, id_msg_delete)
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è chat {id_chat} msg {id_msg_delete}')

    def _send_message(self, id_chat, text, markup):
        if not self._bot:
            self._create_link_bot()
        return self._bot.send_message(id_chat, text, reply_markup=markup)

    def _create_link_bot(self):
        """
        –°–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å —Å –±–æ—Ç–æ–º
        :return:
        """
        self._bot = telebot.TeleBot(self._API_TOKEN)


if __name__ == '__main__':
    MsgUser().send_msg_have_place()
