import datetime

from parsing.base_sql import Look,Settings
from parsing.cities import DownloadCities
from typing import List, Dict
from parsing.message import MsgAnswer, MsgControl
from parsing.dates import Dates
from parsing.routes import DownloadRoutes


class Task:
    def __init__(self):
        self.id_base: int
        self.id_chat: str
        self.info: str

    @property
    def info_list(self):
        return f'{self.id_chat}: {self.info}'


class StepsTasks(MsgControl):
    def __init__(self):
        super().__init__()
        self._dict_task_active: Dict[str, Task] = dict()

    def s1_view_active(self, id_chat):
        """
        –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–π—Å–∞
        :param id_chat:
        :return:
        """
        try:
            tasks = Look.select().where(Look.id_chat == id_chat).order_by(Look.date, Look.info).execute()
            count = len(tasks)
            for task_item, id_chat in zip(tasks, range(1, count + 1)):
                task = self.create_info_task(id_chat, task_item.id, task_item.date,
                                task_item.id_from_city, task_item.id_to_city,
                                task_item.info)
                self._dict_task_active[str(id_chat)] = task
            datetime_last_check = TimeTask.get_str()
        except Exception as e:
            print(str(e))
            raise Exception('–û—à–∏–±–∫–∞: –í—ã–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π!')
        if len(self._dict_task_active) == 0:
            self.b_end = True
            return MsgAnswer('', '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!')
        return MsgAnswer('', '–í–∞—à–∏ —Å–ª–µ–∂–µ–Ω–∏—è —Ä–µ–π—Å–æ–≤:\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄüëÄ‚îÄ‚îÄ\n' +
                             '\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n'
                             .join([task.info_list for task in self._dict_task_active.values()]) +
                             '\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄüöó‚îÄ‚îÄüöô‚îÄ\n' +
                             f'‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞\n—Ä–µ–π—Å–æ–≤ –±—ã–ª–∞ –≤ {datetime_last_check}'
                             f'\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄüëÄ‚îÄ‚îÄ\n'
                             f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ª–µ–∂–µ–Ω–∏—è\n–¥–ª—è –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:')

    def s2_delete_task(self, id_chat, id_list_text):
        """
        –ü–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —É–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ
        :return:
        """
        task_delete = self._dict_task_active.get(id_list_text)
        if not task_delete:
            raise Exception('–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞!')
        StepsTasks.delete_task(task_delete.id_base)
        self.b_end = True
        return MsgAnswer('', f'–°–ª–µ–∂–µ–Ω–∏–µ ‚Ññ{task_delete.id_chat} —É–¥–∞–ª–µ–Ω–æ!')


    def get_id_base(self, id):
        return self._dict_task_active.get(id)

    def create_info_task(self, id_chat, id_base, date, id_city_from, id_city_to, info):
        """
        –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏—è—Ö
        :return:
        """
        task = Task()
        dw_ct = DownloadCities()
        city_from = dw_ct.cities(id_city_from)
        city_to = dw_ct.cities(id_city_to)
        task.info = f'{date} {info}\n     {city_from} - {city_to}'
        task.id_base = id_base
        task.id_chat = id_chat
        return task

    def get_tasks_have_place(cls):
        """
        –í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π —Å —Ä–µ–π—Å–∞–º–∏ —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏
        :return:
        """
        try:
            print(f'–í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π c —Ä–µ–π—Å–∞–º–∏ —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏')
            return Look.select(Look.id, Look.id_chat, Look.date, Look.id_from_city,
                               Look.id_to_city, Look.info, Look.id_msg_delete) \
                .where(Look.have_place == True).order_by(Look.date).execute()
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ c –±–∞–∑—ã. {str(e)}')

    @classmethod
    def get_msg_delete(cls, id_chat, id_look):
        """
        ID —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å
        :return:
        """
        try:
            print(f'–í—ã–≥—Ä—É–∑–∫–∞ ID —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å')
            looks = Look.select(Look.id_msg_delete) \
                .where(Look.id_chat == id_chat, Look.id == id_look).execute()
            for l in looks:
                return l.id_msg_delete
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ c –±–∞–∑—ã. {str(e)}')

    @classmethod
    def update_task_msg_delete(cls, id_base, id_delete):
        """
        –û–±–Ω–æ–≤–∏—Ç—å ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        try:
            Look.update({Look.id_msg_delete: id_delete}) \
                .where(Look.id == id_base).execute()
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å id_base {id_base}, id_msg {id_delete} {str(e)}')

    @classmethod
    def delete_task(cls, id_base):
        """
        –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ —Å ID
        """
        try:
            Look.delete().where(Look.id == id_base).execute()
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–∏—Ç—å id_base {id_base} {str(e)}')
            raise Exception(f'–û—à–∏–±–∫–∞: –°–ª–µ–∂–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–µ–Ω–æ.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ —á–∏—Å–ª–∞.')

    @classmethod
    def check_task_mirror(cls, id_chat, date, id_city_from, id_city_to, info):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª, —Ç–∞–∫–æ–µ –∂–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–∂–µ–Ω–∏—è
        :return:
        """
        look = None
        try:
            print(f'–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–∂–µ–Ω–∏–µ —Å –±–∞–∑—ã –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            look = Look.select(Look.id) \
                .where(Look.id_chat == id_chat,
                       Look.date == date,
                       Look.id_from_city == id_city_from,
                       Look.id_to_city == id_city_to,
                       Look.info == info).execute()
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ c –±–∞–∑—ã. {str(e)}')
        for _ in look:
            raise Exception('–û—à–∏–±–∫–∞: –≠—Ç–æ —Ä–µ–π—Å –≤—ã —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ!\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞.')


class RunTask:
    @classmethod
    def check(cls):
        """
        –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–π—Å–æ–≤ –≤ –±–∞–∑–µ.(–∑–∞–¥–∞–Ω–∏–π)
        –í—ã–≥—Ä—É–∂–∞–µ—Ç –≤ –¥–Ω–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞.
        –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –¥–Ω–∏ –ø–æ –Ω–∞–ª–∏—á–∏—é –≤—Ä–µ–º–µ–Ω–∏
        :return:
        """

        for date in cls._get_dates():
            id_from, id_to = 0, 0
            tasks = cls._get_tasks(date)
            if tasks:
                routes = None
                for task in tasks:
                    if id_from and id_to:
                        if id_from != task.id_from_city or id_to != task.id_to_city:
                            routes = cls._get_routes_server(task.date, task.id_from_city, task.id_to_city)
                            id_from = task.id_from_city
                            id_to = task.id_to_city
                    else:
                        routes = cls._get_routes_server(task.date, task.id_from_city, task.id_to_city)
                        id_from = task.id_from_city
                        id_to = task.id_to_city
                    if routes:
                        for route in routes:
                            if task.info == route.info_short and route.have_place:
                                cls._update_task_have_place(date, task.id_from_city, task.id_to_city, task.info, True)
                            elif task.info == route.info_short and task.have_place and not route.have_place:
                                cls._update_task_have_place(date, task.id_from_city, task.id_to_city, task.info, False)
        TimeTask.set(datetime.datetime.now())

    @classmethod
    def _get_dates(cls):
        """
        –î–∞—Ç—ã –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Å—ã
        :return:
        """
        dates = Dates()
        dates.have_list()
        return dates.items

    @classmethod
    def _get_tasks(cls, date):
        """
        –í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π —Å —Ä–µ–π—Å–∞–º–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞ 7 –¥–Ω–µ–π
        :return:
        """
        try:
            print(f'–í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π c –±–∞–∑—ã –Ω–∞ {date}')
            return Look.select(Look.date, Look.id_from_city, Look.id_to_city, Look.info, Look.have_place).distinct() \
                .where(Look.date == date).order_by(Look.date, Look.id_from_city).execute()
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ c –±–∞–∑—ã. {str(e)}')

    @classmethod
    def _get_routes_server(cls, date, city_from, city_to):
        """
        –í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π —Å —Ä–µ–π—Å–∞–º–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
        :return:
        """
        try:
            print(f'–í—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Å–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {date}, {city_from}, {city_to}')
            down_routes = DownloadRoutes(date, city_from, city_to)
            routes = down_routes.list
            if routes:
                return routes
            print(f'–û—à–∏–±–∫–∞ –Ω–µ—Ç —Ä–µ–π—Å–æ–≤ –Ω–∞ {date}, {city_from}, {city_to}')
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ä–µ—Ä–∞. {str(e)}')

    @classmethod
    def _update_task_have_place(cls, date, city_from, city_to, info, have_place):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Å–æ–≤ –≤ –±–∞–∑–µ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –º–µ—Å—Ç–∞
        """
        try:
            Look.update({Look.have_place: have_place}) \
                .where(Look.date == date, Look.id_from_city == city_from,
                       Look.id_to_city == city_to, Look.info == info) \
                .execute()
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Ä–µ–π—Å {date}, {city_from}, {city_to}. {str(e)}')


class TimeTask:
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    NAME_DATETIME_TASK_CHECK = "DATETIME_TASK_CHECK"  # –∏–º—è –ø–æ–ª—è –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–π—Å–æ–≤
    NAME_USER = "USER"  # –∏–º—è
    MSK_DATETIME_VIEW = "%d.%m.%Y %H:%M:%S"

    @classmethod
    def set(cls, datetime_check):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–π—Å–æ–≤
        :param datetime_check: –í—Ä–µ–º—è –∫–ª–∞—Å—Å–∞ datetime
        """
        try:
            datetime_str = datetime_check.strftime(cls.MSK_DATETIME_VIEW)
            Settings.update({Settings.value: datetime_str}) \
                    .where(Settings.name == cls.NAME_DATETIME_TASK_CHECK) \
                    .execute()
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è {cls.NAME_DATETIME_TASK_CHECK}: {datetime_check} {str(e)}')

    @classmethod
    def get_str(cls):
        """
        –í–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–π—Å–æ–≤
        :return: –î–∞—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        """
        try:
            setting = Settings.select(Settings.value) \
                              .where(Settings.name == cls.NAME_DATETIME_TASK_CHECK) \
                              .execute()
            for s in setting:
                return s.value[-8:]
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –ø–æ–ª—è {cls.NAME_DATETIME_TASK_CHECK} {str(e)}')

    @classmethod
    def add_name(cls, name):
        """
        –í–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–π—Å–æ–≤
        :return: –î–∞—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        """
        try:
            Settings.create(name=datetime.datetime.now().strftime('%d/%m/%y %H:%M:%S.%f'), value=name).save()
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –≤ –±–∞–∑—É {cls.NAME_USER} {name} {str(e)}')


if __name__ == '__main__':
    print(TimeTask.add_name(8523))  # –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏–π
    # DownloadCities().download_cities_from()  # –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å –æ–±–Ω–æ–≤–ª—è—Ç—å id –≥–æ—Ä–æ–¥–æ–≤
    # —Ä–∞–∑ –≤ –¥–µ–Ω—å —É–¥–∞–ª—è—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è
